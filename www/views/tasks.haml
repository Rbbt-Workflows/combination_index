:sass

  #drugs, #combinations
    .new_drug, .new_combination
      padding-left: 0 !important
      .icon.input, input
        width: 10em !important
    .form 
      width: 30em !important
      .input
        width: 15em !important
       
    .form
      float: right
      width: 50%

  #drugs, #combinations
    table
      float: left
      tbody
        max-height: 19em
        overflow: auto
        display: block

  #drugs
    table
      th,td
        display: inline-block
        height: 2.5em
        overflow: hidden
        text-overflow: ellipsis
        &:nth-child(1)
          width: 8em
        &:nth-child(2)
          width: 8em
        &:nth-child(3)
          width: 4em
      th:nth-child(3)
        width: calc(4em + 24px)
  #combinations
    table
      th,td
        display: inline-block
        height: 2.5em
        overflow: hidden
        text-overflow: ellipsis
        &:nth-child(1)
          width: 8em
        &:nth-child(2)
          width: 8em
        &:nth-child(3)
          width: 8em
        &:nth-child(4)
          width: 6em
      th:nth-child(4)
        width: calc(6em + 24px)


  dl.measurements
    display: block
    dt, dd
      display: inline-block
    dt
      font-weight: bold
    dd
      margin-right: 3em


.ui.basic.segment#drugs
.ui.basic.segment#combinations

.ui.basic.segment#import
  .ui.header
    Import data
  .content
    = action_parameters nil, {}, :action => '/import', :method => 'POST' do
      - input :file, :file, "Data file"
      - input :scale, :boolean, "Scale effect"
      - input :invert, :boolean, "Invert effect"

  .examples

    Click below to load example data:
      
    :javascript
      example_inputs = [];
    %ul
      - example_dir = CombinationIndex.libdir.examples['combination_index_batch']["Miller"]
      - name = File.basename(example_dir)
      - task_info = workflow.task_info 'combination_index_batch'
      - inputs = Workflow.load_inputs(example_dir, task_info[:inputs], task_info[:input_types])
      - inputs.each{ |k,v| v.replace Open.read(v) if String === v and File.exists? v }

      :javascript
        example_inputs["#{ name }"] = #{inputs.to_json}

      %li
        %a.load_example(href="#" task='combination_index_batch' name=name)= name

      - example_dir = CombinationIndex.libdir.examples['combination_index_batch']["4EBP1_pS65_V_GBL9006968"]
      - name = File.basename(example_dir)
      - task_info = workflow.task_info 'combination_index_batch'
      - inputs = Workflow.load_inputs(example_dir, task_info[:inputs], task_info[:input_types])
      - inputs.each{ |k,v| v.replace Open.read(v) if String === v and File.exists? v }

      :javascript
        example_inputs["#{ name }"] = #{inputs.to_json}

      %li
        %a.load_example(href="#" task='combination_index_batch' name=name)= name

    :javascript
      defer(function(){
        var form = $('#import form')

        $("a.load_example").click(function(){
          var link = $(this);
          var name = $(link).attr('name');
          var inputs = example_inputs[name];
          form[0].reset()

          for (var input in inputs){
            var value = inputs[input]
            var input = form.find('[name=' + input + ']')
            if (input.is('[type=checkbox]')){
              input.prop('checked', value)
            }else{
              input.val(value)
            }
          }
          form.find('[name=jobname]').val(name)
          return false
        })
      })

:deferjs
  $('#import form input[type=submit]').click(function(){
    $('#import form').ajaxSubmit(function(response){console.log(response); data = JSON.parse(response);rbbt.ci.drug_info = data.drug_info; rbbt.ci.combination_info = data.combination_info; m.redraw()})
    return false
  })
  $('table').tablesorter()

.ui.basic.segment
  .ui.header
    Tasks
  .content
    .ui.vertical.menu
      - tasks = CombinationIndex.exec_exports + CombinationIndex.synchronous_exports + CombinationIndex.asynchronous_exports
      - tasks.sort.each do |task|
        - url = '/CombinationIndex/' << task.to_s
        %a.item(href=url)= task.to_s

     
= link_js '/js-find/rbbt.job.js'
= link_js '/js-find/rbbt.drugs.js'
:deferjs

  //rbbt.insist_get = function(params, deferred, timeout){
  //  if (undefined === deferred) deferred = m.deferred()
  //  if (undefined === timeout) timeout = 1000
  //  if (timeout > 10000) timeout = 10000

  //  params.extract = function(xhr, xhrOptions){
  //    if (xhr.status == '202') throw(xhr)
  //    return xhr.responseText
  //  }

  //  m.request(params).then(
  //    function(res){
  //      deferred.resolve(res)
  //    }, 
  //    function(xhr){ 
  //      if (xhr.status == '202'){ 
  //        if (xhr.responseURL != params.url) params = $.extend(params, {url: xhr.responseURL, method: 'GET', data: params.data})
  //        if (params.data !== undefined && params.data['_update'] !== undefined) params.data['_update'] = undefined
  //        setTimeout(function(){ rbbt.insist_get(params, deferred,timeout*1.5) }, timeout)
  //      }else{ deferred.reject(new Error(xhr.split(" ")[0])) }
  //    }
  //  )

  //  return deferred.promise
  //}

  //rbbt.job = function(workflow, task, inputs){
  //  var url = '/' + workflow + '/' + task

  //  var data = new FormData()
  //  data.append("_format", 'raw')
  //  for (i in inputs){
  //    data.append(i, inputs[i])
  //  }

  //  var deferred = m.deferred()

  //  var params = {
  //    url: url, 
  //    method: 'POST', 
  //    serialize: function(data) {return data},
  //    data: data,
  //    deserialize: function(value) {return value},
  //  }

  //  return rbbt.insist_get(params, deferred)
  //}


  var ci = rbbt.ci = {}


  //{{{ DRUGS

  ci.drug_info = {}

  ci.drugs = {}

  ci.drugs.vm = (function(){
    var vm = {}
    vm.init = function(){


      vm.ls_key = 'rbbt.ci.drug_info'

      vm.save = function(){
        localStorage[vm.ls_key] = JSON.stringify(ci.drug_info)
      }

      vm.load = function(){
        ci.drug_info = JSON.parse(localStorage[vm.ls_key])
      }

      if (localStorage[vm.ls_key] !== undefined) vm.load()

      var init_drug = Object.keys(ci.drug_info)[0]
      vm.drug = m.prop(init_drug)
      vm.new_drug = m.prop()

      vm.dose = m.prop("")
      vm.effect = m.prop("")
      vm.median_point = m.prop(0.5)

      vm.plot = {content: m.prop(), title: m.prop()}

      vm.add_new_drug = function(){
        ci.drug_info[vm.new_drug()] = []
        vm.save()
        return false
      }

      vm.add_measurement = function(){
        var drug = vm.drug()
        var dose = vm.dose()
        var effect = vm.effect()
        if (undefined === ci.drug_info[drug]) ci.drug_info[drug] = {}
        ci.drug_info[drug].push([dose, effect])
        vm.save()
        return false
      }

      vm.remove_measurement = function(measurement){
        var dose = measurement.split(":")[0]
        var effect = measurement.split(":")[1]
        var drug = ci.drugs.vm.drug()
        var new_list = [];
        for (i in ci.drug_info[drug]){
          var p = ci.drug_info[drug][i]
          if (p[0] != dose || p[1] != effect) new_list.push(p)
        }
        ci.drug_info[drug] = new_list
        vm.save()
        return false
      }
    }
    return vm
  }())


  ci.drugs.controller = function(){
    ci.drugs.vm.init()

    this.draw_fit = function(){
      var drug = ci.drugs.vm.drug()
      var drug_info = ci.drug_info[drug]

      var doses = drug_info.map(function(p){return p[0]})
      var effects = drug_info.map(function(p){return p[1]})

      ci.drugs.vm.plot.title = m.prop('loading')
      m.redraw()

      var job_error = function(e){ci.drugs.vm.plot.content = m.prop('<div class="ui error message">Error producing plot</div>') }

      var inputs = {doses: doses.join("|"), effects: effects.join("|"), median_point: ci.drugs.vm.median_point()}

      rbbt.job('CombinationIndex','fit', inputs).then(ci.drugs.vm.plot.content, job_error).then(function(){ ci.drugs.vm.plot.title("Fit plot for drug: " + drug)})

      return false
    }
  }

  ci.drugs.view = function(controller){
    var drug_details =  ci.drugs.view.drug_details(controller)
    return drug_details
  }

  ci.drugs.view.drug_details = function(controller){
    var drug_details = []
    var drug_info = ci.drug_info
    var drug_tabs = []

    drug_tabs.push(m('.item.left.float.new_drug',
                     m('.ui.icon.input.small', 
                       [m('input[type=text]', {placeholder: "New drug", onchange: m.withAttr('value', ci.drugs.vm.new_drug)}), 
                         m('i.icon.plus',{onclick: ci.drugs.vm.add_new_drug})
                       ])))

    for (drug in drug_info){
      var klass = (ci.drugs.vm.drug() == drug ? 'active' : '')
      drug_tabs.push(m('.item[data-tab=' + drug + ']', {class: klass, onclick: m.withAttr('data-tab', ci.drugs.vm.drug)}, drug))

      var table = ci.drugs.view.drug_details.measurement_table(controller, drug_info[drug])
      var new_measurement = ci.drugs.view.drug_details.measurement_new(controller, drug)
      var klass = (ci.drugs.vm.drug() == drug ? 'active' : '')
      details = m('.drug_details.ui.segment.tab.bottom.attached[data-tab=' + drug + ']', {class: klass}, [new_measurement, table])

      drug_details.push(details)
    }


    var tabs = m('.ui.tabular.menu.top.attached', drug_tabs)
    var plot 
    if (undefined === ci.drugs.vm.plot.title()){
      plot = m('.figure.ui.segment', m('.header', 'No plot to display'))
    }else{
      if (ci.drugs.vm.plot.title() == 'loading'){
        plot = m('.figure.ui.segment.loading', 'loading plot')
      }else{
        plot = m('.figure.ui.segment', [m('.ui.header', ci.drugs.vm.plot.title()), m('.content.svg', m.trust(ci.drugs.vm.plot.content()))])
      }

    }

    return m('.ui.three.column.grid', [m('.eleven.wide.column', [tabs, drug_details]), m('.five.wide.column', plot)])
  }

  ci.drugs.view.drug_details.measurement_new = function(controller, drug){
    var dose_input = m('.ui.small.input', [m('label', 'Dose'), m('input', {type: 'text', value: ci.drugs.vm.dose(), onchange: m.withAttr('value', ci.drugs.vm.dose)})])
    var effect_input = m('.ui.small.input', [m('label', 'Effect'), m('input', {type: 'text', value: ci.drugs.vm.effect(),  onchange: m.withAttr('value', ci.drugs.vm.effect)})])
    var median_point_input = m('.ui.small.input', [m('label', 'Median effect point'), m('input', {type: 'text', value: ci.drugs.vm.median_point(),  onchange: m.withAttr('value', ci.drugs.vm.median_point)})])

    var submit = m('input[type=submit].ui.submit.button', {'data-drug': drug, onclick: m.withAttr('data-drug', ci.drugs.vm.add_measurement), value: 'Add measurement'})
    var display_plot = m('input[type=submit].ui.submit.button', {'data-drug': drug, onclick: m.withAttr('data-drug', controller.draw_fit), value: 'Display plot'})
    var buttons = m('.ui.buttons', [submit, display_plot])

    var form = m('.ui.form', [dose_input, effect_input, median_point_input, buttons])
    return form
  }

  ci.drugs.view.drug_details.measurement_table = function(controller, measurements){
    var rows = measurements.map(function(p){ 
      var dose = p[0]
      var effect = p[1]
      return ci.drugs.view.drug_details.measurement_row(controller, dose, effect)
    })

    var header = m('thead', m('tr', [m('th', 'Dose'), m('th', 'Effect'), m('th', '')]))
    var body = m('tbody', rows)
    return m('table.measurements.ui.table.collapsing', header, body)
  }

  ci.drugs.view.drug_details.measurement_row = function(controller, dose, effect){
    var remove = m('i.ui.icon.minus', {measurement: [dose,effect].join(":"), onclick: m.withAttr('measurement', ci.drugs.vm.remove_measurement)})
    return m('tr', [m('td', dose), m('td', effect), m('td', remove)])
  }


  m.module(document.getElementById("drugs"), ci.drugs)




  //{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{
  //{{{ COMBINATIONS
  //{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{

  ci.combination_info = {"AK-PI":  [[1,0.5,0.5]]}

  ci.combinations = {}

  ci.combinations.controller = function(){
    var controller = this
    ci.combinations.vm.init()

    this.draw_CI = function(meassurement){
      ci.combinations.vm.plot.title = m.prop('loading')
      m.redraw()

      var combination = ci.combinations.vm.combination()

      var blue_drug = combination.split("-")[0]
      var blue_drug_info = ci.drug_info[blue_drug]
      var blue_doses = blue_drug_info.map(function(p){return p[0]})
      var blue_effects = blue_drug_info.map(function(p){return p[1]})

      var red_drug = combination.split("-")[1]
      var red_drug_info = ci.drug_info[red_drug]
      var red_doses = red_drug_info.map(function(p){return p[0]})
      var red_effects = red_drug_info.map(function(p){return p[1]})

 
      if (undefined === meassurement) {
        var combination_info
        var values = ci.combination_info[combination][0]

        var blue_dose = values[0]
        var red_dose = values[1]
        var effect = values[2]
      }else{
        var values = meassurement.split(":")
        var blue_dose = parseFloat(values[0])
        var red_dose = parseFloat(values[1])
        var effect = parseFloat(values[2])
      }

      var fix_ratio = ci.combinations.vm.fix_ratio()

      var job_error = function(e){ci.combinations.vm.plot.content = m.prop('<div class="ui error message">Error producing plot</div>') }

      var inputs = {red_doses: red_doses.join("|"), red_effects: red_effects.join("|"), blue_doses: blue_doses.join("|"), blue_effects: blue_effects.join("|"), blue_dose: blue_dose, red_dose: red_dose, effect: effect, fix_ratio: fix_ratio }

      rbbt.job('CombinationIndex','ci', inputs).then(ci.combinations.vm.plot.content, job_error).then(function(){ ci.combinations.vm.plot.title("Fit plot for combination: " + blue_drug + " (blue) and " + red_drug + " (red)")})

      return false
    }
  }


  ci.combinations.vm = (function(){
    var vm = {}
    vm.init = function(){

      vm.combination = {
        drug1: m.prop(),
        drug2: m.prop(),
        dose1: m.prop(),
        dose2: m.prop(),
        effect: m.prop()
      }

      vm.ls_key = 'rbbt.ci.combination_info'

      vm.save = function(){
        localStorage[vm.ls_key] = JSON.stringify(ci.combination_info)
      }

      vm.load = function(){
        ci.combination_info = JSON.parse(localStorage[vm.ls_key])
      }

      if (localStorage[vm.ls_key] !== undefined && localStorage[vm.ls_key] != '') vm.load()

      var init_combination = Object.keys(ci.combination_info)[0]
      vm.combination = m.prop(init_combination)

      vm.blue_drug = m.prop("")
      vm.red_drug = m.prop("")

      vm.new_combination = function(){
        return [vm.blue_drug(), vm.red_drug()].join("-")
      }

      vm.blue_dose = m.prop("")
      vm.red_dose = m.prop("")
      vm.effect = m.prop("")
      vm.fix_ratio = m.prop(false)

      vm.plot = {content: m.prop(), title: m.prop()}

      vm.add_new_combination = function(){
        ci.combination_info[vm.new_combination()] = []
        vm.save()
        return false
      }

      vm.add_measurement = function(){
        var combination = vm.combination()
        var red_dose = vm.red_dose()
        var blue_dose = vm.blue_dose()
        var effect = vm.effect()

        if (undefined === ci.combination_info[combination]) ci.combination_info[combination] = {}
        ci.combination_info[combination].push([parseFloat(red_dose), parseFloat(blue_dose), parseFloat(effect)])
        vm.save()
        return false
      }

      vm.remove_measurement = function(measurement){
        var blue_dose = measurement.split(":")[0]
        var red_dose = measurement.split(":")[1]
        var effect = measurement.split(":")[2]
        var combination = vm.combination()
        var new_list = [];
        for (i in ci.combination_info[combination]){
          var p = ci.combination_info[combination][i]
          if (p[0] != blue_dose || p[1] != red_dose || p[2] != effect) new_list.push(p)
        }
        ci.combination_info[combination] = new_list
        vm.save()
        return false
      }
    }
    return vm
  }())

  ci.combinations.view = function(controller){

   return ci.combinations.view.combination_details(controller)
  }

  //ci.combinations.view.new_combination = function(controller){
  //  var drug1 = m('.ui.input', m('input[type=text]',  {onchange: m.withAttr('value', vm.combination.drug1), placeholder: "Drug 1"}))
  //  var drug2 = m('.ui.input', m('input[type=text]',  {onchange: m.withAttr('value', vm.combination.drug2), placeholder: "Drug 2"}))
  //  var dose1 = m('.ui.input', m('input[type=text]',  {onchange: m.withAttr('value', vm.combination.dose1), placeholder: "Dose 1"}))
  //  var dose2 = m('.ui.input', m('input[type=text]',  {onchange: m.withAttr('value', vm.combination.dose2), placeholder: "Dose 2"}))
  //  var effect = m('.ui.input', m('input[type=text]', {onchange: m.withAttr('value', vm.combination.effect), placeholder: "Effect"}))
  //  var submit = m('input.ui.button.submit[type=submit]', {value: "Draw plot", onclick: controller.draw_CI})
  //  return [drug1, drug2, dose1, dose2, effect, submit]
  //}

  ci.combinations.view.combination_details = function(controller){
    var combination_details = []
    var combination_info = ci.combination_info
    var combination_tabs = []

    combination_tabs.push(m('.item.left.float.new_combination',
                     m('.ui.input.small', 
                       [
                         m('input[type=text]', {placeholder: "Blue drug", onchange: m.withAttr('value', ci.combinations.vm.blue_drug)}), 
                         m('input[type=text]', {placeholder: "Red drug", onchange: m.withAttr('value', ci.combinations.vm.red_drug)}), 
                         m('i.icon.plus',{onclick: ci.combinations.vm.add_new_combination})
                       ])))

    for (combination in combination_info){
      var klass = (ci.combinations.vm.combination() == combination ? 'active' : '')
      combination_tabs.push(m('.item[data-tab=' + combination + ']', {class: klass, onclick: m.withAttr('data-tab', ci.combinations.vm.combination)}, combination))

      var table = ci.combinations.view.combination_details.measurement_table(controller, combination_info[combination])

      var new_measurement = ci.combinations.view.combination_details.measurement_new(controller, combination)
      var klass = (ci.combinations.vm.combination() == combination ? 'active' : '')
      details = m('.combination_details.ui.segment.tab.bottom.attached[data-tab=' + combination + ']', {class: klass}, [new_measurement, table])

      combination_details.push(details)
    }


    var tabs = m('.ui.tabular.menu.top.attached', combination_tabs)
    var plot 
    if (undefined === ci.combinations.vm.plot.title()){
      plot = m('.figure.ui.segment', m('.header', 'No plot to display'))
    }else{
      if (ci.combinations.vm.plot.title() == 'loading'){
        plot = m('.figure.ui.segment.loading', 'loading plot')
      }else{
        plot = m('.figure.ui.segment', [m('.ui.header', ci.combinations.vm.plot.title()), m('.content.svg', m.trust(ci.combinations.vm.plot.content()))])
      }

    }

    return m('.ui.three.column.grid', [m('.eleven.wide.column', [tabs, combination_details]), m('.five.wide.column', plot)])
  }

  ci.combinations.view.combination_details.measurement_new = function(controller, combination){
    var blue_dose_input = m('.input.ui.small.input', [m('label', 'Blue dose'), m('input', {type: 'text', value: ci.combinations.vm.blue_dose(), onchange: m.withAttr('value', ci.combinations.vm.blue_dose)})])
    var red_dose_input = m('.input.ui.small.input', [m('label', 'Red dose'), m('input', {type: 'text', value: ci.combinations.vm.red_dose(), onchange: m.withAttr('value', ci.combinations.vm.red_dose)})])

    var effect_input = m('.ui.small.input', [m('label', 'Effect'), m('input', {type: 'text', value: ci.combinations.vm.effect(),  onchange: m.withAttr('value', ci.combinations.vm.effect)})])
    var fix_ratio = m('.ui.small.input', [m('label', 'Fix combination ratio'), m('input.ui.checkbox', {type: 'checkbox', checked: ci.combinations.vm.fix_ratio(),  onchange: m.withAttr('checked', ci.combinations.vm.fix_ratio)})])
    var submit = m('input[type=submit].ui.submit.button', {'data-combination': combination, onclick: m.withAttr('data-combination', ci.combinations.vm.add_measurement), value: 'Add measurement'})
    var display_plot = m('input[type=submit].ui.submit.button', {'data-combination': combination, onclick: m.withAttr('data-combination', controller.draw_CI), value: 'Display plot'})
    var buttons = m('.ui.buttons', [submit, display_plot])
    var form = m('.ui.form', [blue_dose_input, red_dose_input, effect_input, fix_ratio, buttons])
    return form
  }

  ci.combinations.view.combination_details.measurement_table = function(controller, measurements){
    var rows = measurements.map(function(p){ 
      var blue_dose = p[0]
      var red_dose = p[1]
      var effect = p[2]
      return ci.combinations.view.combination_details.measurement_row(controller, blue_dose, red_dose, effect)
    })

    var header = m('thead', m('tr', [m('th', 'Blue dose'), m('th', 'Red dose'), m('th', 'Effect'), m('th', '')]))
    var body = m('tbody', rows)
    return m('table.measurements.ui.table.collapsing', header, body)
  }

  ci.combinations.view.combination_details.measurement_row = function(controller, blue_dose, red_dose, effect){
    var remove = m('i.ui.icon.minus', {measurement: [blue_dose, red_dose, effect].join(":"), onclick: m.withAttr('measurement', ci.combinations.vm.remove_measurement)})
    var plot = m('i.ui.icon.send', {measurement: [blue_dose, red_dose, effect].join(":"), onclick: m.withAttr('measurement', controller.draw_CI)})
    return m('tr', [m('td', blue_dose), m('td', red_dose), m('td', effect), m('td', [remove, plot])])
  }


  m.module(document.getElementById("combinations"), ci.combinations)
