.ui.basic.segment#help

  :markdown
    CImbinator is a web server for the assesment of drug combination synergies.
    Here is a small tutorial on how to use this server:

      1. Load example data
      2. Select dose response fit model, for instance "least_squares".
      3. Click Batch to compute dose-response series and combination effects
      4. Click on [Drug] to open dose-response data information..
      5. Click on `Display plot` to display dose response curve and compute GI50 values.
      6. Click on [Drug combination] to open dose-response data information for this combination of drugs.
      7. Click on `Plot` to display A) single drug dose response curves, B) computed additive effect curve), and C) measured combination effects, along with CI values.
      8. Upload your own data.
 
    CImbination offers several options to help analyze dose-response curves
    that deviate from the standard median effect theory.  The standard method
    is to use the `least squares` model type. Alternatively you can select one
    of the `LL.*` methods from the R package
    [DRC](https://cran.r-project.org/web/packages/drc/index.html). 
    
    Selecting the `fix dossage` option aligns the dosages for the single drug
    points in the combination plot (as if the other drug is replaced by a
    neutral substance). The `median effect point` is used to show how the ME
    (median effect) points are selected for the single drug plots at different
    effect levels; when using LL.* models to compute a synergy the median
    effect point is placed at the combination effect level. Lastly, selecting
    the option to `compute the CI directly from fit` the ME points and ME
    statistics derived from the single drug fits are ignored and the CI is
    computed directly from the dose-response fit for each drug; note that the
    result might deviate a little from the alternative using the ME points, and
    the additive line in the combination plot, as well as the random additive
    lines and the CI ranges calculated from them, might not match exactly these
    CI calculations.



.ui.basic.segment#controls

.ui.basic.segment#drugs
.ui.basic.segment#combinations

.ui.basic.segment#import
  .ui.header
    Import data
  .content
    = action_parameters nil, {}, :action => '/import', :method => 'POST', :enctype => "multipart/form-data" do
      - input :file, :file, "Data file"
      - input :scale, :boolean, "Scale effect", true
      - input :invert, :boolean, "Invert effect", false

  .examples

    Click below to load example data:
      
    :javascript
      example_inputs = [];

    %ul

      - example_dir = CombinationIndex.libdir.examples['combination_index_batch']["Miller"]
      - name = File.basename(example_dir)
      - task_info = workflow.task_info 'combination_index_batch'
      - inputs = Workflow.load_inputs(example_dir, task_info[:inputs], task_info[:input_types])
      - inputs.each{ |k,v| v.replace Open.read(v) if String === v and File.exists? v }
      :javascript
        example_inputs["#{ name }"] = #{inputs.to_json}

      %li
        %a.load_example(href="#" task='combination_index_batch' name=name)= name


      - example_dir = CombinationIndex.libdir.examples['combination_index_batch']["Haagensen-fig1"]
      - name = File.basename(example_dir)
      - task_info = workflow.task_info 'combination_index_batch'
      - inputs = Workflow.load_inputs(example_dir, task_info[:inputs], task_info[:input_types])
      - inputs.each{ |k,v| v.replace Open.read(v) if String === v and File.exists? v }
      :javascript
        example_inputs["#{ name }"] = #{inputs.to_json}
      %li
        %a.load_example(href="#" task='combination_index_batch' name=name)= name

.ui.basic.segment#export
  .ui.header
    Export data
  .content
    .ui.button
      Export

  :deferjs
    $('#export .ui.button').click(function(){
      var content = "#Treatment\tDose\tEffect\n"

      for (drug in rbbt.ci.drug_info){
        var line = ""
        var regimes = rbbt.ci.drug_info[drug]
        var doses = []
        var effects = []

        line = line + drug + "\t"
        
        for (i = 0; i < regimes.length; i++){
          var pair = regimes[i]
          doses.push(pair[0])
          effects.push(pair[1])
        }
        line = line + doses.join("|") + "\t" + effects.join("|") + "\n"

        content = content + line
      }

      for (combination in rbbt.ci.combination_info){
        var line = ""
        var regimes = rbbt.ci.combination_info[combination]
        var doses = []
        var effects = []

        line = line + combination + "\t"
        
        console.log(regimes)
        for (i = 0; i < regimes.length; i++){
          var pair = regimes[i]
          doses.push([pair[0],pair[1]].join("-"))
          effects.push(pair[2])
        }
        line = line + doses.join("|") + "\t" + effects.join("|") + "\n"

        content = content + line
      }

      var blob = new Blob([content], {type: "text/plain;charset=utf-8"});
      saveAs(blob, "CI-binator-export.txt");
      return(false)
    })



     
:deferjs
  var form = $('#import form')

  form.find('input[type=submit]').click(function(){
    $('#import form').ajaxSubmit(function(response){
      data = JSON.parse(response);
      rbbt.ci.drug_info = data.drug_info;
      rbbt.ci.combination_info = data.combination_info; 
      rbbt.ci.drugs.vm.save()
      rbbt.ci.drugs.vm.init()
      rbbt.ci.combinations.vm.save()
      rbbt.ci.combinations.vm.init()
      m.redraw()
    })
    return false
  })

  $("a.load_example").click(function(){
    var link = $(this);
    var name = $(link).attr('name');
    var inputs = example_inputs[name];
    form[0].reset()

    for (var input in inputs){
      var value = inputs[input]
      var input = form.find('[name=' + input + ']')
      if (input.is('[type=checkbox]')){
        input.prop('checked', value)
      }else{
        input.val(value)
      }
    }
    form.find('[name=jobname]').val(name)
    return false
  })

  require(['rbbt.job', 'rbbt.views', 'rbbt.modal', 'rbbt.ci'], function(args){
    require(['rbbt.ci.controls', 'rbbt.ci.combinations', 'rbbt.ci.drugs'], function(args){
      m.module(document.getElementById("controls"), rbbt.ci.controls)
      m.module(document.getElementById("drugs"), rbbt.ci.drugs)
      m.module(document.getElementById("combinations"), rbbt.ci.combinations)
      m.redraw()
    })
  })

  $('table').tablesorter()
