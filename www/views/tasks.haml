:sass
  .ui.logo
    font-family: serif
  .ui.tabular.menu > .item
    font-family: monospace

  .plot.column
    position: absolute !important
    bottom: 0
    right: 0
    figure
      min-height: 400px
    
  .ci_values
    width: calc(100% - 4px)
    height: 3px
    position: absolute
    bottom: 0
    left: 0
    margin-left: 2px
    margin-right: 2px
    display: flex
    .ci_value
      height: 3px
      background-color: attr('data-color')

  #drugs, #combinations
    min-height: 23em
    .new_drug, .new_combination
      padding-left: 0 !important
      .icon.input, input
        width: 10em !important
    .form 
      width: 30em !important
      .input
        width: 15em !important
       
    .form
      float: right
      width: 50%

  #drugs, #combinations
    .ui.close.icon.button
      float: right
      clear: both
      margin-top: 1em
    table
      float: left
      tbody
        max-height: 23em
        overflow: auto
        display: block

  #drugs
    table
      th,td
        display: inline-block
        height: 2.5em
        overflow: hidden
        text-overflow: ellipsis
        &:nth-child(1)
          width: 8em
        &:nth-child(2)
          width: 8em
        &:nth-child(3)
          width: 4em
      th:nth-child(3)
        width: calc(4em + 24px)
  #combinations
    table
      th,td
        display: inline-block
        height: 4em
        overflow: hidden
        text-overflow: ellipsis
        &:nth-child(1)
          width: 8em
        &:nth-child(2)
          width: 8em
        &:nth-child(3)
          width: 8em
        &:nth-child(4)
          width: 10em
      th:nth-child(4)
        width: calc(10em + 24px)


  dl.measurements
    display: block
    dt, dd
      display: inline-block
    dt
      font-weight: bold
    dd
      margin-right: 3em


.ui.basic.segment#controls
.ui.basic.segment#drugs
.ui.basic.segment#combinations

.ui.basic.segment#export
  .ui.header
    Export data
  .content
    .ui.button
      Export

  :deferjs
    $('#export .ui.button').click(function(){
      var content = "#Treatment\tDose\tEffect\n"

      for (drug in rbbt.ci.drug_info){
        var line = ""
        var regimes = rbbt.ci.drug_info[drug]
        var doses = []
        var effects = []

        line = line + drug + "\t"
        
        for (i = 0; i < regimes.length; i++){
          var pair = regimes[i]
          doses.push(pair[0])
          effects.push(pair[1])
        }
        line = line + doses.join("|") + "\t" + effects.join("|") + "\n"

        content = content + line
      }

      for (combination in rbbt.ci.combination_info){
        var line = ""
        var regimes = rbbt.ci.combination_info[combination]
        var doses = []
        var effects = []

        line = line + combination + "\t"
        
        console.log(regimes)
        for (i = 0; i < regimes.length; i++){
          var pair = regimes[i]
          doses.push([pair[0],pair[1]].join("-"))
          effects.push(pair[2])
        }
        line = line + doses.join("|") + "\t" + effects.join("|") + "\n"

        content = content + line
      }

      var blob = new Blob([content], {type: "text/plain;charset=utf-8"});
      saveAs(blob, "CI-binator-export.txt");
    })

.ui.basic.segment#import
  .ui.header
    Import data
  .content
    = action_parameters nil, {}, :action => '/import', :method => 'POST', :enctype => "multipart/form-data" do
      - input :file, :file, "Data file"
      - input :scale, :boolean, "Scale effect", true
      - input :invert, :boolean, "Invert effect", false

  .examples

    Click below to load example data:
      
    :javascript
      example_inputs = [];
    %ul
      - example_dir = CombinationIndex.libdir.examples['combination_index_batch']["Miller"]
      - name = File.basename(example_dir)
      - task_info = workflow.task_info 'combination_index_batch'
      - inputs = Workflow.load_inputs(example_dir, task_info[:inputs], task_info[:input_types])
      - inputs.each{ |k,v| v.replace Open.read(v) if String === v and File.exists? v }

      :javascript
        example_inputs["#{ name }"] = #{inputs.to_json}

      %li
        %a.load_example(href="#" task='combination_index_batch' name=name)= name

      - example_dir = CombinationIndex.libdir.examples['combination_index_batch']["4EBP1_pS65_V_GBL9006968"]
      - name = File.basename(example_dir)
      - task_info = workflow.task_info 'combination_index_batch'
      - inputs = Workflow.load_inputs(example_dir, task_info[:inputs], task_info[:input_types])
      - inputs.each{ |k,v| v.replace Open.read(v) if String === v and File.exists? v }

      :javascript
        example_inputs["#{ name }"] = #{inputs.to_json}

      %li
        %a.load_example(href="#" task='combination_index_batch' name=name)= name

      - example_dir = CombinationIndex.libdir.examples['combination_index_batch']["KU-GD"]
      - name = File.basename(example_dir)
      - task_info = workflow.task_info 'combination_index_batch'
      - inputs = Workflow.load_inputs(example_dir, task_info[:inputs], task_info[:input_types])
      - inputs.each{ |k,v| v.replace Open.read(v) if String === v and File.exists? v }

      :javascript
        example_inputs["#{ name }"] = #{inputs.to_json}

      %li
        %a.load_example(href="#" task='combination_index_batch' name=name)= name
        
      - example_dir = CombinationIndex.libdir.examples['combination_index_batch']["Haagensen"]
      - name = File.basename(example_dir)
      - task_info = workflow.task_info 'combination_index_batch'
      - inputs = Workflow.load_inputs(example_dir, task_info[:inputs], task_info[:input_types])
      - inputs.each{ |k,v| v.replace Open.read(v) if String === v and File.exists? v }

      :javascript
        example_inputs["#{ name }"] = #{inputs.to_json}

      %li
        %a.load_example(href="#" task='combination_index_batch' name=name)= name
        
      - example_dir = CombinationIndex.libdir.examples['combination_index_batch']["Bethametasone-Nitazoxanide"]
      - name = File.basename(example_dir)
      - task_info = workflow.task_info 'combination_index_batch'
      - inputs = Workflow.load_inputs(example_dir, task_info[:inputs], task_info[:input_types])
      - inputs.each{ |k,v| v.replace Open.read(v) if String === v and File.exists? v }

      :javascript
        example_inputs["#{ name }"] = #{inputs.to_json}


      %li
        %a.load_example(href="#" task='combination_index_batch' name=name)= name


    :javascript
      defer(function(){
        var form = $('#import form')

        $("a.load_example").click(function(){
          var link = $(this);
          var name = $(link).attr('name');
          var inputs = example_inputs[name];
          form[0].reset()

          for (var input in inputs){
            var value = inputs[input]
            var input = form.find('[name=' + input + ']')
            if (input.is('[type=checkbox]')){
              input.prop('checked', value)
            }else{
              input.val(value)
            }
          }
          form.find('[name=jobname]').val(name)
          return false
        })
      })

:deferjs
  $('#import form input[type=submit]').click(function(){
    $('#import form').ajaxSubmit(function(response){
      data = JSON.parse(response);
      rbbt.ci.drug_info = data.drug_info;
      rbbt.ci.combination_info = data.combination_info; 
      rbbt.ci.drugs.vm.save()
      rbbt.ci.combinations.vm.save()
      m.redraw()
    })
    return false
  })
  $('table').tablesorter()

.ui.basic.segment
  .ui.header
    Tasks
  .content
    .ui.vertical.menu
      - tasks = CombinationIndex.exec_exports + CombinationIndex.synchronous_exports + CombinationIndex.asynchronous_exports
      - tasks.sort.each do |task|
        - url = '/CombinationIndex/' << task.to_s
        %a.item(href=url)= task.to_s

     
:deferjs
  require(['rbbt.job', 'rbbt.views', 'rbbt.ci'], function(args){
    require(['rbbt.ci.controls', 'rbbt.ci.combinations', 'rbbt.ci.drugs'], function(args){
      m.module(document.getElementById("controls"), rbbt.ci.controls)
      m.module(document.getElementById("drugs"), rbbt.ci.drugs)
      m.module(document.getElementById("combinations"), rbbt.ci.combinations)
      m.redraw()
    })
  })

